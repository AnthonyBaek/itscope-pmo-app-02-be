---
description:
globs:
alwaysApply: false
---
# 로드맵 Phase 01: 이메일/비밀번호 기반 로그인 시스템 구현

## 📋 프로젝트 개요

**목표**: 사전 등록된 사용자의 이메일/비밀번호를 통한 JWT 기반 인증 시스템 구현
**기술 스택**: Spring Boot + Spring Security + JWT (Backend) / React + Axios (Frontend)
**예상 소요 시간**: 3-5일 (병렬 개발)

---

## 🎯 Step 0: API 명세 공동 설계 (API Contract First)

### 📝 API 명세서

#### 1. 로그인 API
```
POST /api/auth/login
Content-Type: application/json

Request Body:
{
  "email": "test@test.com",
  "password": "password123"
}

Success Response (200 OK):
{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "tokenType": "Bearer",
  "expiresIn": 3600
}

Error Response (401 Unauthorized):
{
  "message": "이메일 또는 비밀번호가 일치하지 않습니다.",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

#### 2. 메인 페이지 데이터 API
```
GET /api/main
Authorization: Bearer {accessToken}

Success Response (200 OK):
{
  "message": "안녕하세요, test@test.com 님!",
  "user": {
    "email": "test@test.com",
    "name": "테스트 사용자"
  }
}

Error Response (401 Unauthorized):
{
  "message": "인증이 필요합니다.",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

### 🔄 테스트 시나리오
1. **정상 로그인**: `test@test.com` / `password123` → JWT 토큰 발급
2. **잘못된 비밀번호**: `test@test.com` / `wrong` → 401 에러
3. **존재하지 않는 이메일**: `none@test.com` / `password123` → 401 에러
4. **토큰 없이 메인 접근**: Authorization 헤더 없음 → 401 에러
5. **유효한 토큰으로 메인 접근**: 올바른 JWT → 사용자 정보 반환

---

## 🚀 Step 1: 기반 구축

### 🔧 백엔드 (Spring Boot)

#### 1.1 의존성 추가 (`pom.xml` 또는 `build.gradle`)

**Maven (pom.xml)**:
```xml
<dependencies>
    <!-- Spring Boot Starters -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    
    <!-- Database -->
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <scope>runtime</scope>
    </dependency>
    
    <!-- JWT -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-api</artifactId>
        <version>0.11.5</version>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-impl</artifactId>
        <version>0.11.5</version>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-jackson</artifactId>
        <version>0.11.5</version>
        <scope>runtime</scope>
    </dependency>
</dependencies>
```

#### 1.2 User 엔티티 생성

```java
// src/main/java/com/example/demo/entity/User.java
@Entity
@Table(name = "users")
@Getter @Setter @NoArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(unique = true, nullable = false)
    private String email;
    
    @Column(nullable = false)
    private String password;
    
    @Column(nullable = false)
    private String name;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    public User(String email, String password, String name) {
        this.email = email;
        this.password = password;
        this.name = name;
    }
}
```

#### 1.3 기본 설정 파일

**application.yml**:
```yaml
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/your_database
    username: your_username
    password: your_password
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: create-drop  # 개발 환경용
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  
  security:
    user:
      password: temp  # 기본 보안 설정 비활성화용

# JWT 설정
jwt:
  secret: mySecretKey123456789012345678901234567890  # 실제로는 더 복잡하고 안전한 키 사용
  expiration: 3600000  # 1시간 (밀리초)
```

### 🎨 프론트엔드 (React)

#### 1.1 프로젝트 생성 및 의존성 설치

```bash
# Vite를 사용한 React 프로젝트 생성
npm create vite@latest frontend-app -- --template react
cd frontend-app
npm install

# 추가 라이브러리 설치
npm install axios react-router-dom
```

#### 1.2 기본 라우팅 설정

```jsx
// src/App.jsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import MainPage from './pages/MainPage';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/" element={<MainPage />} />
      </Routes>
    </Router>
  );
}

export default App;
```

#### 1.3 기본 페이지 컴포넌트 생성

**LoginPage.jsx**:
```jsx
// src/pages/LoginPage.jsx
import { useState } from 'react';

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    // TODO: Step 3에서 실제 API 호출로 교체 예정
    console.log('로그인 시도:', { email, password });
    setLoading(false);
  };

  return (
    <div style={{ maxWidth: '400px', margin: '100px auto', padding: '20px' }}>
      <h2>로그인</h2>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '15px' }}>
          <label>이메일:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>비밀번호:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        {error && <div style={{ color: 'red', marginBottom: '15px' }}>{error}</div>}
        <button 
          type="submit" 
          disabled={loading}
          style={{ width: '100%', padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none' }}
        >
          {loading ? '로그인 중...' : '로그인'}
        </button>
      </form>
    </div>
  );
}

export default LoginPage;
```

**MainPage.jsx**:
```jsx
// src/pages/MainPage.jsx
import { useState, useEffect } from 'react';

function MainPage() {
  const [userInfo, setUserInfo] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // TODO: Step 3에서 실제 API 호출로 교체 예정
    // Mock 데이터로 UI 개발
    setTimeout(() => {
      setUserInfo({
        message: "안녕하세요, test@test.com 님!",
        user: { email: "test@test.com", name: "테스트 사용자" }
      });
      setLoading(false);
    }, 1000);
  }, []);

  if (loading) {
    return <div style={{ textAlign: 'center', marginTop: '100px' }}>로딩 중...</div>;
  }

  return (
    <div style={{ maxWidth: '600px', margin: '50px auto', padding: '20px' }}>
      <h1>메인 페이지</h1>
      {userInfo && (
        <div>
          <p>{userInfo.message}</p>
          <div style={{ backgroundColor: '#f8f9fa', padding: '15px', marginTop: '20px' }}>
            <h3>사용자 정보</h3>
            <p>이메일: {userInfo.user.email}</p>
            <p>이름: {userInfo.user.name}</p>
          </div>
        </div>
      )}
      <button 
        onClick={() => {
          // TODO: Step 4에서 로그아웃 기능 구현
          console.log('로그아웃');
        }}
        style={{ marginTop: '20px', padding: '10px 20px', backgroundColor: '#dc3545', color: 'white', border: 'none' }}
      >
        로그아웃
      </button>
    </div>
  );
}

export default MainPage;
```

---

## 📊 Step 1 완료 체크리스트

### ✅ 백엔드 체크리스트
- [ ] Spring Boot 프로젝트 생성 완료
- [ ] 필요한 의존성 (Spring Security, JWT, PostgreSQL) 추가 완료
- [ ] User 엔티티 클래스 작성 완료
- [ ] application.yml 기본 설정 완료
- [ ] 프로젝트가 정상적으로 실행되는지 확인 (`mvn spring-boot:run`)

### ✅ 프론트엔드 체크리스트
- [ ] React 프로젝트 생성 완료
- [ ] 필요한 라이브러리 (axios, react-router-dom) 설치 완료
- [ ] 기본 라우팅 설정 완료 (`/login`, `/` 경로)
- [ ] LoginPage, MainPage 컴포넌트 생성 완료
- [ ] 프로젝트가 정상적으로 실행되는지 확인 (`npm run dev`)

### 🤝 협업 확인사항
- [ ] API 명세서를 양팀이 검토하고 합의 완료
- [ ] 테스트 시나리오를 양팀이 이해하고 있음
- [ ] 다음 단계(Step 2) 진행 일정 협의 완료

---

## 🎯 다음 단계 미리보기

**Step 2**에서는:
- **백엔드**: 테스트용 사용자 데이터 삽입, UserDetailsService 구현
- **프론트엔드**: Mock 로그인 함수 구현, 상태 관리 로직 개발

각 단계가 완료되면 다음 단계로 진행하여, 최종적으로 완전한 로그인 시스템을 구축할 예정입니다.
